------------------------------------------------------------------------------
--                                                                          --
--  CS311 Programming Languages Definition & Implementation                 --
--                                                                          --
--  Exercise 1 Part 1 (an IMP program)                                      --
--                                                                          --
------------------------------------------------------------------------------

-- Please modify this file to add your group's solutions to the problems.
-- Make sure you read the asssociated files defining the grammars IMP and LAM.
-- To assist with our partially automated assessment processes, please do
-- not change text on lines beginning with --, and provide answers in the
-- zones tagged with -- ???


-- The grammar for IMP can be found in the file
--   Exercise1/References/IMPgrammar
-- The grammar for LAM can be found in the file
--   Exercise1/References/LAMgrammar

------------------------------------------------------------------------------
-- Question 1.1.1
--
-- Edit the text below by inserting or removing whitespace or symbols, but
-- preserving all the alphanumeric characters. Ensure that the result is a
-- valid IMP <program>.

integer triangle n :=
  new i = n in new t = 0 indo
    { while i > 0
        { t := t + i,
          i := i - 1
        }
    return t
triangle 4 + triangle 5

------------------------------------------------------------------------------
-- Question 1.2
--
-- Consider the following string 
-- f \\x -> s t
--
-- By only inserting parenthesis, write as many valid LAM expressions


------------------------------------------------------------------------------
-- Question 1.3.1
--
-- Define a grammar for Boolean Logic. Your grammar should allow for formulae 
-- which are variables, the logical constants True and False and for the 
-- combination of logical formulae via the logical connectives and, not, or, 
-- and implies
--
--
------------------------------------------------------------------------------
-- Question 1.3.2
--
-- Define a new grammar for Boolean Logic which only allows the definition of 
-- logical formulae which are in Disjunctive Normal Form 
--
--
--
--

------------------------------------------------------------------------------
-- Question 1.4
--
-- Consider the grammar LAM. A lambda term is a redex if it is of the form 
-- (\\ x -> t) s 
-- 
-- A lambda term is a normal form if it is not a redex and none of its subterms 
-- are redexes. This is a very important definition as we will see later in the 
-- course. However, this defnition is not a grammar for defining normal forms
-- via production rules.
--
-- Define a grammar for normal forms. As a hint, you will need to simultaneously 
-- define a grammar for what are called neutral terms, ie those normal forms 
-- which, in addition, are not of the form \\ x -> t
--
--
--
--
----------------------------------------------------------------
-- Question 1.5
--
-- Consider the production rules

<x> := a <y> b
     | c 
     | b <x> a 

<y> := c <x> c
     | a

-- Write down all valid expressions for the non-terminal <x> of length 6 or less 














hello

